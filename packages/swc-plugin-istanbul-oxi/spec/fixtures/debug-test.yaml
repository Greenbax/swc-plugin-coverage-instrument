---
name: simple function
code: |
  var x = args[0];
  function foo() {
     return 42;
  }
  output = x < 5 ? foo() : 15;
tests:
  - name: covers line and function
    args: [2]
    out: 42
    lines: {'1': 1, '3': 1, '5': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1, '2': 1 }
  - name: does not cover function
    args: [10]
    out: 15
    lines: {'1': 1, '3': 0, '5': 1}
    branches: {'0': [0, 1]}
    functions: {'0': 0}
    statements: {'0': 1, '1': 0, '2': 1 }
---
name: anonymous function
code: |
  var x = args[0];
  output = x < 5 ? (function() { return 42; }()) : 15;
tests:
  - name: covers line and function
    args: [2]
    out: 42
    lines: {'1': 1, '2': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1, '2': 1 }
  - name: does not cover function
    args: [10]
    out: 15
    lines: {'1': 1, '2': 1}
    branches: {'0': [0, 1]}
    functions: {'0': 0}
    statements: {'0': 1, '1': 1, '2': 0}
---
name: anonymous function newline
code: |
  var x = args[0];
  output = x < 5 ?
     (function meaningOfLife() {
     return 42;
  }())
   : 15;
tests:
  - name: covers line and function
    args: [2]
    out: 42
    lines: {'1': 1, '2': 1, '4': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1, '2': 1}
  - name: does not cover function
    args: [10]
    out: 15
    lines: {'1': 1, '2': 1, '4': 0}
    branches: {'0': [0, 1]}
    functions: {'0': 0}
    statements: {'0': 1, '1': 1, '2': 0}

---
name: function decl in unreachable place
code: |
  function foo(x) {
     return bar(x);
     function bar(y) { return y * 2 }
  }
  output = args[0] < 2 ? 2: foo(args[0]);
tests:
  - name: covers declaration but not function
    args: [1]
    out: 2
    lines: { '2': 0, '3': 0, '5': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 0, '1': 0}
    statements: {'0': 0, '1': 0, '2': 1}

  - name: covers declaration and function
    args: [10]
    out: 20
    lines: { '2': 1, '3': 1, '5': 1}
    branches: {'0': [0, 1]}
    functions: {'0': 1, '1': 1}
    statements: {'0': 1, '1': 1, '2': 1 }

#function cov_18biir0b3p() {
#  var path = "/Users/ojkwon/github/istanbuljs/packages/istanbul-lib-instrument/test/util/verifier.js";
#  var hash = "ce642d132e97eac8869ee8ce4bf4f21b9b212867";
#  var global = new Function("return this")();
#  var gcv = "__testing_coverage__";
#  var coverageData = {
#    path: "/Users/ojkwon/github/istanbuljs/packages/istanbul-lib-instrument/test/util/verifier.js",
#    statementMap: {
#      "0": {
#        start: {
#          line: 1,
#          column: 8
#        },
#        end: {
#          line: 1,
#          column: 15
#        }
#      },
#      "1": {
#        start: {
#          line: 2,
#          column: 0
#        },
#        end: {
#          line: 6,
#          column: 6
#        }
#      },
#      "2": {
#        start: {
#          line: 4,
#          column: 3
#        },
#        end: {
#          line: 4,
#          column: 13
#        }
#      }
#    },
#    fnMap: {
#      "0": {
#        name: "meaningOfLife",
#        decl: {
#          start: {
#            line: 3,
#            column: 13
#          },
#          end: {
#            line: 3,
#            column: 26
#          }
#        },
#        loc: {
#          start: {
#            line: 3,
#            column: 29
#          },
#          end: {
#            line: 5,
#            column: 1
#          }
#        },
#        line: 3
#      }
#    },
#    branchMap: {
#      "0": {
#        loc: {
#          start: {
#            line: 2,
#            column: 9
#          },
#          end: {
#            line: 6,
#            column: 5
#          }
#        },
#        type: "cond-expr",
#        locations: [{
#          start: {
#            line: 3,
#            column: 4
#          },
#          end: {
#            line: 5,
#            column: 3
#          }
#        }, {
#          start: {
#            line: 6,
#            column: 3
#          },
#          end: {
#            line: 6,
#            column: 5
#          }
#        }],
#        line: 2
#      }
#    },
#    s: {
#      "0": 0,
#      "1": 0,
#      "2": 0
#    },
#    f: {
#      "0": 0
#    },
#    b: {
#      "0": [0, 0]
#    },
#    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
#    hash: "ce642d132e97eac8869ee8ce4bf4f21b9b212867"
#  };
#  var coverage = global[gcv] || (global[gcv] = {});
#
#  if (!coverage[path] || coverage[path].hash !== hash) {
#    coverage[path] = coverageData;
#  }
#
#  var actualCoverage = coverage[path];
#  {
#    // @ts-ignore
#    cov_18biir0b3p = function () {
#      return actualCoverage;
#    };
#  }
#  return actualCoverage;
#}
#
#cov_18biir0b3p();
#var x = (cov_18biir0b3p().s[0]++, args[0]);
#cov_18biir0b3p().s[1]++;
#output = x < 5 ? (cov_18biir0b3p().b[0][0]++, function meaningOfLife() {
#  cov_18biir0b3p().f[0]++;
#  cov_18biir0b3p().s[2]++;
#  return 42;
#}()) : (cov_18biir0b3p().b[0][1]++, 15);

---
name: function declaration assignment name (top-level)
guard: isInferredFunctionNameAvailable
code: |
  const foo = function() {}
  var bar = function() {}
  output = foo.name + ' ' + bar.name;
tests:
  - name: properly sets function name
    out: 'foo bar'
    lines: {'1': 1, '2': 1, '3': 1}
    functions: {'0': 0, '1': 0}
    statements: {'0': 1, '1': 1, '2': 1}
    guard: isInferredFunctionNameAvailable

---
name: function declaration assignment name (in function)
guard: isInferredFunctionNameAvailable
code: |
  function a () {
    const foo = function () {}
  }
  function b () {
    const bar = function () {}
    return bar.name
  }
  output = b()
tests:
  - name: properly sets function name
    out: 'bar'
    lines: {'2': 0, '5': 1, '6': 1, '8': 1}
    functions: {'0': 0, '1': 0, '2': 1, '3': 0}
    statements: {'0': 0, '1': 1, '2': 1, '3': 1}
    guard: isInferredFunctionNameAvailable

---
name: function named Function
code: |
  function Function () {
    this.x = 42
  }
  output = new Function().x
tests:
  - name: does not fail if a function is called Function
    out: 42
    lines: {'2': 1, '4': 1}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1}
