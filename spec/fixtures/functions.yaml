---
name: simple function
code: |
  var x = args[0];
  function foo() {
     return 42;
  }
  output = x < 5 ? foo() : 15;
tests:
  - name: covers line and function
    args: [2]
    out: 42
    lines: {'1': 1, '3': 1, '5': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1, '2': 1 }

  - name: does not cover function
    args: [10]
    out: 15
    lines: {'1': 1, '3': 0, '5': 1}
    branches: {'0': [0, 1]}
    functions: {'0': 0}
    statements: {'0': 1, '1': 0, '2': 1 }

---
name: anonymous function
code: |
  var x = args[0];
  output = x < 5 ? (function() { return 42; }()) : 15;
tests:
  - name: covers line and function
    args: [2]
    out: 42
    lines: {'1': 1, '2': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1, '2': 1 }

  - name: does not cover function
    args: [10]
    out: 15
    lines: {'1': 1, '2': 1}
    branches: {'0': [0, 1]}
    functions: {'0': 0}
    statements: {'0': 1, '1': 1, '2': 0}

---
name: anonymous function newline
code: |
  var x = args[0];
  output = x < 5 ?
     (function meaningOfLife() {
     return 42;
  }())
   : 15;
tests:
  - name: covers line and function
    args: [2]
    out: 42
    lines: {'1': 1, '2': 1, '4': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1, '2': 1}

  - name: does not cover function
    args: [10]
    out: 15
    lines: {'1': 1, '2': 1, '4': 0}
    branches: {'0': [0, 1]}
    functions: {'0': 0}
    statements: {'0': 1, '1': 1, '2': 0}

---
name: function decl in unreachable place
code: |
  function foo(x) {
     return bar(x);
     function bar(y) { return y * 2 }
  }
  output = args[0] < 2 ? 2: foo(args[0]);
tests:
  - name: covers declaration but not function
    args: [1]
    out: 2
    lines: { '2': 0, '3': 0, '5': 1}
    branches: {'0': [1, 0]}
    functions: {'0': 0, '1': 0}
    statements: {'0': 0, '1': 0, '2': 1}

  - name: covers declaration and function
    args: [10]
    out: 20
    lines: { '2': 1, '3': 1, '5': 1}
    branches: {'0': [0, 1]}
    functions: {'0': 1, '1': 1}
    statements: {'0': 1, '1': 1, '2': 1 }

---
name: function declaration assignment name (top-level)
guard: isInferredFunctionNameAvailable
code: |
  const foo = function() {}
  var bar = function() {}
  output = foo.name + ' ' + bar.name;
tests:
  - name: properly sets function name
    out: 'foo bar'
    lines: {'1': 1, '2': 1, '3': 1}
    functions: {'0': 0, '1': 0}
    statements: {'0': 1, '1': 1, '2': 1}
    guard: isInferredFunctionNameAvailable

---
name: function declaration assignment name (in function)
guard: isInferredFunctionNameAvailable
code: |
  function a () {
    const foo = function () {}
  }
  function b () {
    const bar = function () {}
    return bar.name
  }
  output = b()
tests:
  - name: properly sets function name
    out: 'bar'
    lines: {'2': 0, '5': 1, '6': 1, '8': 1}
    functions: {'0': 0, '1': 0, '2': 1, '3': 0}
    statements: {'0': 0, '1': 1, '2': 1, '3': 1}
    guard: isInferredFunctionNameAvailable

---
name: function named Function
code: |
  function Function () {
    this.x = 42
  }
  output = new Function().x
tests:
  - name: does not fail if a function is called Function
    out: 42
    lines: {'2': 1, '4': 1}
    functions: {'0': 1}
    statements: {'0': 1, '1': 1}
---
name: functions declared in an object
code: |
  const computedIdx = 'computed';
  const obj = {
    normal() {
      console.log('normal');
    },
    'string'() {
      console.log('string literal');
    },
    1() {
      console.log('number literal');
    },
    2n() {
      console.log('bigint literal');
    },
    [computedIdx]() {
      console.log('computed property');
    },
    get getterFn() {
      console.log('getter function');
    },
    set setterFn(val) {
      console.log('setter function', val);
    },
    get 'getterFn'() {
      console.log('getter function with string literal');
    },
    set 'setterStringLiteral'(val) {
      console.log('setter function with string literal', val);
    },
  };
tests:
  - name: all functions in object are covered
    lines: {'1': 1, '2': 1, '4': 0, '7': 0, '10': 0, '13': 0, '16': 0, '19': 0, '22': 0, '25': 0, '28': 0}
    functions: {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0}
    statements: {'0': 1, '1': 1, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0}